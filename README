使用方法：
	1.编译前，运行configure.sh脚本
	2.make all
	3.make install
当想清理项目时：
	1.make clean  是清掉O文件
	2.make distclean 清掉会自动生成的文件
目录：(+:代表文件，-:代表文件夹)
--------package  这个的存在是为了将功能层与驱动层区分起来
	+tft.c
	+tft.h
	+usart_package.c
	+usart_package.h
	+Makefile
--------chip	写着基本的芯片驱动
	+font_image.h
	+ssd1963.c
	+ssd1963.h
	+tsc2046.c
	+tsc2046.h
	+Makefile
--------elf_output

--------libc	一些与cpu无关的，但有经常用到的库文件
	+cpu_typed.h
	+font.c
	+font.h
	+libmath.c
	+libmath.h
	+string.c
	+string.h
	+Makefile
--------obj_output 编译出来的所以*.o文件都将会在这目录进行链接
	+Makefile
	+stm32f103.lds	
--------protocol 一些基础的协议
	+spi.c
	+spi.h
	+Makefile
--------start_code 启动代码
	+startup_stm32f10x_hd.S
	+Makefile
	+mem.inc			
--------stm32f103 标准化的文件夹，可以不用修改
	---------coresupport
		+core_cm3.c
		+core_cm3.h
		+Makefile
	---------stm32f10x
		+stm32f10x.h
		+system_stm32f10x.c
		+system_stm32f10x.h
		+Makefile
	+makefile	
--------sysdev 写着关于cpu基本的功能驱动
	+fsmc.c
	+fsmc.h
	+gpio.c
	+gpio.h
	+init_main.c
	+init_main.h
	+led.c
	+led.h
	+rcc.c
	+rcc.h
	+sys.h
	+systick.c
	+systick.h
	+touch.c
	+touch.h
	+usart.c
	+usart.h
	+Makefile
--------user 用户的应用层代码，包括一些用户配置
	-----------user_configure 这个是用户配置文件夹
			+configure.h	里面的宏很多宏开关
			+include.h
	+main.c
	+Makefile

+Doxyfile 

+jlink.cmd

+Makefile

+README

+var.mk